<?php
/**
 * @file
 * Contains project_backend.module.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\editor\Entity\Editor;
use Drupal\Core\Field\WidgetBase;

// Custom admin css.
\Drupal::moduleHandler()
  ->loadInclude('project_backend', 'inc', 'project_backend.theme');

// Add remote audio as a media type.
\Drupal::moduleHandler()
  ->loadInclude('project_backend', 'inc', 'project_backend.media_types');

/**
 * Load our theme's CK Editor CSS file.
 *
 * Implements hook_ckeditor_css_alter().
 */
function project_backend_ckeditor_css_alter(array &$css, Editor $editor) {
  $css[] = \Drupal::service('extension.list.theme')
      ->getPath('nrgi') . '/assets/css/ckeditor-style.css';
}

/**
 *
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter
 */
function project_backend_field_widget_single_element_paragraphs_form_alter(array &$element, FormStateInterface $form_state, array $context) {
  $field_definition = $context['items']->getFieldDefinition();
  $paragraph_entity_reference_field_name = $field_definition->getName();
  if ($paragraph_entity_reference_field_name == 'field_components') {
    $widget_state = WidgetBase::getWidgetState($element['#field_parents'], $paragraph_entity_reference_field_name, $form_state);

    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph_instance = $widget_state['paragraphs'][$element['#delta']]['entity'];
    $paragraph_type = $paragraph_instance->bundle();

    // Determine which paragraph type is being embedded.
    if (in_array($paragraph_type, ['featured_content', 'featured_people'])) {

      $dependee_field_name = 'field_items_selection';
      $selector = sprintf(':input[name="%s[%d][subform][%s]"]', $paragraph_entity_reference_field_name, $element['#delta'], $dependee_field_name);

      $element['subform']['field_content_cards']['#states'] = [
        'visible' => [
          $selector => ['value' => '0'],
        ],
      ];

      $element['subform']['field_dynamic_listing']['#states'] = [
        'visible' => [
          $selector => ['value' => '1'],
        ],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK
 */
function project_backend_preprocess_paragraph(&$vars) {
  $paragraphs = ['featured_content', 'featured_people', 'featured_pages'];
  if (in_array($vars['paragraph']->type->target_id, $paragraphs)) {
    // add a class attribute based on the field_layout value
    $layout = $vars['content']['field_layout']['#items']->value;
    $vars['attributes'] = ['class' => $layout . '-per-row'];

    // switch the view modes of the CTs based on the field_show_image value
    if ($vars['paragraph']->field_show_image->value == 0) {
      foreach ($vars['content']['field_content_cards'] as $key => $reference) {
        if (is_int($key)) {
          $vars['content']['field_content_cards'][$key]['#view_mode'] = 'card_no_image';
        }
      }
    }
  }
}

/**
 * Implements hook_language_switch_links_alter().
 */
function project_backend_language_switch_links_alter(array &$links, $type, $path) {
  // Only show the translations that are available
  $translationLanguages = Drupal::routeMatch()
    ->getParameter('node')
    ->getTranslationLanguages();
  foreach ($links as $lang => $link) {
    if (!in_array($lang, array_keys($translationLanguages))) {
      unset($links[$lang]);
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function project_backend_preprocess_node(&$variables) {
  // Add the language switcher block to a variable that will be available in twig
  // Show the block only if there is a translation
  if (count($variables["elements"]["#node"]->getTranslationLanguages()) > 1) {
    $block = Block::load('languageswitcher');
    $render = Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($block);
    $variables['language_switcher'] = $render;
  };
}

/**
 * Implements hook_block_view_alter().
 */
function project_backend_block_view_alter(array &$build, BlockPluginInterface $block) {
  // Set the language switcher label based on the CT type
  if ($block->getPluginId() !== 'language_block:language_interface') {
    return;
  }
  $node = Drupal::routeMatch()->getParameter('node');
  $pages = ['landing_page', 'page','listing_page'];
  $build['#configuration']['label'] = t('Select language');
  if (in_array($node->getType(), $pages)) {
    $build['#configuration']['label'] = t($node->field_language_bar_text->value);
  }
}

/**
 * Implements hook_form_alter().
 */
function project_backend_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $forms = ['site_setting_entity_newsletter_edit_form', 'site_setting_entity_social_media_links_form'];
  if (in_array($form_id, $forms)) {
    Cache::invalidateTags(['social_media_block']);
    Cache::invalidateTags(['newsletter_signup_block']);
  }
}

/**
 * Implements hook_theme().
 */
function project_backend_theme($existing, $type, $theme, $path) {
  return [
    'social_media_links' => [
      'variables' => ['social_network' => NULL],
    ],
  ];
}

